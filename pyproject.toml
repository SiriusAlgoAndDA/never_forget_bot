[tool.poetry]
name = "NEVER FORGET BOT"
version = "0.1.0"
description = "Secure save info about your cards data"
authors = []

[tool.poetry.dependencies]
python = "^3.12"
pydantic = {version = "^2.9.2", extras = ["dotenv"]}
sqlalchemy = "^2.0.36"
alembic = "^1.14.0"
psycopg2-binary = "^2.9.10"
asyncpg = "^0.30.0"
jinja2 = "^3.1.4"
loguru = "^0.7.3"
loki-logger-handler = "^1.0.2"
aiogram = "^3.15.0"
pydantic-settings = "^2.7.0"
python-dateutil = "^2.9.0.post0"

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
ruff = "^0.8.3"
autoflake = "^2.3.1"
isort = "^5.13.2"
mypy = "^1.13.0"
unify = "^0.5"
pylint = "^3.3.2"
flake8 = "^7.1.1"
safety = "^3.2.13"
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
pytest-deadfixtures = "^2.2.1"
pytest-asyncio = "^0.25.0"
pytest-xdist = "^3.6.1"
configargparse = "^1.7"
sqlalchemy-utils = "^0.41.2"
factory-boy = "^3.3.1"
types-python-dateutil = "^2.9.0.20241206"
greenlet = "^3.1.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# PYTEST

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--cov-fail-under=50"
testpaths = "tests/"
python_files = "test_*.py"
python_classes = ["Test*"]
python_functions = "test_*"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
exclude_lines = [
    "# pragma: no cover",
    "def __repr__",
    "def __str__",
    "def __unicode__",
]
show_missing = true
skip_empty = true
skip_covered = true
fail_under = 80
omit = [
  "*/__init__.py",
  "bot/database/migrator/env.py",
]

[tool.coverage.html]
directory = "pytest-cov-report"

[tool.coverage.run]
branch = true
concurrency = ["thread", "greenlet"]
omit = ["tests/*", "**/__main__.py", "*site-packages*", "*__init__.py"]

# LINTERS

[tool.pylint.master]
extension-pkg-allow-list = ["pydantic"]

[tool.pylint.basic]
good-names = ["db"]

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "C0114",  # missing-module-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods (for sqlalchemy tables and pydantic classes)
    "C0115",  # missing-class-docstring (for api routes)
    "C0103",  # Constant name "api" doesn't conform to UPPER_CASE naming style (invalid-name)
    "C0111",  # Missing module docstring (missing-docstring)
    "E0213",  # Method should have "self" as first argument (no-self-argument) - N805 for flake8
    "R0901",  # Too many ancestors (m/n) (too-many-ancestors)
    "R0914",  # Too many local variables (m/n) (too-many-locals)
    "W0511",  # TODO needed? (fixme)
    "E0611",  # No name '<name>' in module '<module>' (no-name-in-module)
]

[tool.pylint]
generated-members = "responses.*"
good-names = "i,j,k,e,x,_,pk,id"
max-module-lines = 300
output-format = "colorized"
ignored-classes= ["contextlib.closing", "sqlalchemy.orm.scoping.scoped_session"]
# Maximum number of nested code blocks for function / method
max-nested-blocks=3
# Maximum number of branch for function / method body
max-branches=15
# Maximum number of statements in function / method body
max-statements=30
# Maximum number of attributes for a class (see R0902).
max-attributes=10
# Maximum number of public methods for a class (see R0904).
max-public-methods=10

[tool.pylint.format]
max-line-length = 120

[tool.pylint."SIMILARITIES"]
min-similarity-lines=10

[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
balanced_wrapping = true
default_section = "THIRDPARTY"
known_first_party = "tests,bot,tools"
lines_after_imports = 2
multi_line_output = 3
line_length = 120
include_trailing_comma = true

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "G", "E", "W", "C"]
ignore = []

# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
# extend-select = ["E501"]

# Avoid trying to fix flake8-bugbear (`B`) violations.
 unfixable = ["B"]

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.format]
# 5. Use single quotes for non-triple-quoted strings.
quote-style = "single"
